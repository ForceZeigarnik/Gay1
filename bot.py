import os
import logging
import random
from datetime import datetime
import aiosqlite
from dotenv import load_dotenv
from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    InlineQueryResultArticle,
    InputTextMessageContent
)
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    CallbackContext,
    CallbackQueryHandler,
    ConversationHandler,
    InlineQueryHandler
)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
ADMIN_ID = int(os.getenv('ADMIN_ID'))
BOT_TOKEN = os.getenv('BOT_TOKEN')
DB_NAME = 'howgay.db'
TEXT_EDIT = 1

class Database:
    def __init__(self):
        self.db_name = DB_NAME
        
    async def init_db(self):
        async with aiosqlite.connect(self.db_name) as conn:
            # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
            await conn.execute('''
                CREATE TABLE IF NOT EXISTS users (
                    user_id INTEGER PRIMARY KEY,
                    username TEXT,
                    tests_count INTEGER DEFAULT 0,
                    last_test DATETIME
                )''')
            
            await conn.execute('''
                CREATE TABLE IF NOT EXISTS tests (
                    test_id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id INTEGER,
                    result INTEGER,
                    timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
                )''')
            
            await conn.execute('''
                CREATE TABLE IF NOT EXISTS config (
                    key TEXT PRIMARY KEY,
                    value TEXT
                )''')
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            await conn.execute('''
                INSERT OR IGNORE INTO config (key, value)
                VALUES ('main_text', 'üåà –í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {percentage}%')
            ''')
            await conn.commit()

    async def get_config(self, key):
        async with aiosqlite.connect(self.db_name) as conn:
            cursor = await conn.execute('SELECT value FROM config WHERE key = ?', (key,))
            result = await cursor.fetchone()
            return result[0] if result else None

    async def update_config(self, key, value):
        async with aiosqlite.connect(self.db_name) as conn:
            await conn.execute('INSERT OR REPLACE INTO config (key, value) VALUES (?, ?)', (key, value))
            await conn.commit()

    async def add_test_result(self, user_id, username, result):
        async with aiosqlite.connect(self.db_name) as conn:
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await conn.execute('''
                INSERT OR REPLACE INTO users 
                (user_id, username, tests_count, last_test)
                VALUES (?, ?, COALESCE((SELECT tests_count FROM users WHERE user_id = ?), 0) + 1, CURRENT_TIMESTAMP)
            ''', (user_id, username, user_id))
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ç–µ—Å—Ç–∞
            await conn.execute('INSERT INTO tests (user_id, result) VALUES (?, ?)', (user_id, result))
            await conn.commit()

    async def get_stats(self, days):
        async with aiosqlite.connect(self.db_name) as conn:
            cursor = await conn.execute('''
                SELECT AVG(result), COUNT(*)
                FROM tests
                WHERE timestamp >= datetime('now', ?)
            ''', (f'-{days} days',))
            avg, count = await cursor.fetchone()
            return round(avg or 0, 1), count or 0

    async def get_user_stats(self, user_id):
        async with aiosqlite.connect(self.db_name) as conn:
            cursor = await conn.execute('SELECT tests_count, last_test FROM users WHERE user_id = ?', (user_id,))
            return await cursor.fetchone()

db = Database()

async def start(update: Update, context: CallbackContext):
    try:
        user = update.effective_user
        result = random.randint(0, 100)
        
        await db.add_test_result(user.id, user.username, result)
        main_text = await db.get_config('main_text')
        response_text = main_text.format(percentage=result)
        
        keyboard = [
            [InlineKeyboardButton("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–Ω–æ–≤–∞", callback_data='retry')],
            [InlineKeyboardButton("üìä –õ–∏—á–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data='my_stats')],
            [InlineKeyboardButton("üåç –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data='global_stats')]
        ]
        
        await update.message.reply_text(
            response_text,
            reply_markup=InlineKeyboardMarkup(keyboard)
            )
    except Exception as e:
        logger.error(f"Start error: {e}")

async def inline_query(update: Update, context: CallbackContext):
    try:
        user = update.inline_query.from_user
        result = random.randint(0, 100)
        main_text = await db.get_config('main_text')
        response_text = main_text.format(percentage=result)
        
        results = [
            InlineQueryResultArticle(
                id=str(random.getrandbits(64)),
                title="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç üåà",
                description="–ù–∞–∂–º–∏—Ç–µ —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ü–µ–Ω—Ç",
                input_message_content=InputTextMessageContent(
                    f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è {user.mention_markdown()}:\n{response_text}",
                    parse_mode='Markdown'
                )
            )
        ]
        await update.inline_query.answer(results)
        
    except Exception as e:
        logger.error(f"Inline error: {e}")

async def button_handler(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    
    try:
        if query.data == 'retry':
            await start(update, context)
        elif query.data == 'my_stats':
            await show_user_stats(query)
        elif query.data == 'global_stats':
            await show_global_stats_menu(query)
            
    except Exception as e:
        logger.error(f"Button handler error: {e}")

async def show_user_stats(query):
    try:
        user_id = query.from_user.id
        stats = await db.get_user_stats(user_id)
        
        if not stats:
            await query.message.reply_text("‚ùå –í—ã –µ—â–µ –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏–ª–∏ —Ç–µ—Å—Ç!")
            return
            
        tests_count, last_test = stats
        response = (
            "üìå –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
            f"‚ñ´Ô∏è –í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–æ–∫: {tests_count}\n"
            f"‚ñ´Ô∏è –ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞: {last_test.split()[0] if last_test else '–µ—â–µ –Ω–µ –±—ã–ª–æ'}"
        )
        await query.message.reply_text(response)
        
    except Exception as e:
        logger.error(f"User stats error: {e}")

async def show_global_stats_menu(query):
    keyboard = [
        [InlineKeyboardButton("7 –¥–Ω–µ–π", callback_data='stats_7')],
        [InlineKeyboardButton("30 –¥–Ω–µ–π", callback_data='stats_30')],
        [InlineKeyboardButton("365 –¥–Ω–µ–π", callback_data='stats_365')]
    ]
    await query.message.reply_text(
        "üåç –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:",
        reply_markup=InlineKeyboardMarkup(keyboard))

async def handle_global_stats(update: Update, context: CallbackContext):
    try:
        query = update.callback_query
        await query.answer()
        
        days = int(query.data.split('_')[1])
        avg, count = await db.get_stats(days)
        
        await query.message.reply_text(
            f"üåç –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {days} –¥–Ω–µ–π:\n"
            f"‚ñ´Ô∏è –°—Ä–µ–¥–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {avg}%\n"
            f"‚ñ´Ô∏è –í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–æ–∫: {count}")
            
    except Exception as e:
        logger.error(f"Global stats error: {e}")

async def admin_panel(update: Update, context: CallbackContext):
    try:
        if update.effective_user.id != ADMIN_ID:
            await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
            return
        
        keyboard = [
            [InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç", callback_data='edit_text')],
            [InlineKeyboardButton("üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data='admin_stats')]
        ]
        await update.message.reply_text(
            "üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å",
            reply_markup=InlineKeyboardMarkup(keyboard))
            
    except Exception as e:
        logger.error(f"Admin panel error: {e}")

async def text_edit_start(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç (–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ {percentage}):")
    return TEXT_EDIT

async def update_text(update: Update, context: CallbackContext):
    try:
        new_text = update.message.text
        if '{percentage}' not in new_text:
            await update.message.reply_text("‚ùå –¢–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å {percentage}!")
            return ConversationHandler.END
        
        await db.update_config('main_text', new_text)
        await update.message.reply_text("‚úÖ –¢–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!")
        return ConversationHandler.END
        
    except Exception as e:
        logger.error(f"Update text error: {e}")
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞")
        return ConversationHandler.END

async def cancel(update: Update, context: CallbackContext):
    await update.message.reply_text("üö´ –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    return ConversationHandler.END

async def init_bot(app):
    await db.init_db()

def main():
    application = Application.builder().token(BOT_TOKEN).post_init(init_bot).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(CommandHandler('start', start))
    application.add_handler(CommandHandler('admin', admin_panel))
    application.add_handler(InlineQueryHandler(inline_query))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
    application.add_handler(CallbackQueryHandler(button_handler))
    application.add_handler(CallbackQueryHandler(
        handle_global_stats,
        pattern=r'^stats_\d+$'
    ))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
    conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(text_edit_start, pattern='^edit_text$')],
        states={
            TEXT_EDIT: [MessageHandler(filters.TEXT & ~filters.COMMAND, update_text)]
        },
        fallbacks=[CommandHandler('cancel', cancel)]
    )
    application.add_handler(conv_handler)

    application.run_polling()

if __name__ == '__main__':
    main()
